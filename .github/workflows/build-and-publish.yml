name: Build and publish on PyPi

on:
  push:
    tags:
      - 'v*'

jobs:
  build-slixmpp:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest ]
        python: [ 3.9, 3.10, 3.11, 3.12 ]

    runs-on: ${{ matrix.os }}
    name: Build wheel on ${{ matrix.os }} with Python ${{ matrix.python }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Rust (cargo)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ./slixmpp/requirements_dev.txt
          python -m pip install -r ./slixmpp/requirements.txt

      - name: Build binaries
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist --no-sdist
          working-directory: ./slixmpp

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python }}
          path: slixmpp/dist/*.whl

  upload-slixmpp:
    name: Upload all wheels to GitHub Release
    needs: build-wheel
    runs-on: ubuntu-latest

    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect wheels in dist/
        run: |
          mkdir dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-spade:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build tools
        run: pip install build twine

      - name: Build the package
        run: python -m build

      - name: Run tests
        run: |
          pip install -r requirements.txt
          pytest

  publish:
    needs: test   # ðŸ‘ˆ Esto asegura que este job solo se ejecute si 'test' ha tenido Ã©xito
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build tools
        run: pip install build twine

      - name: Build
        run: python -m build

      - name: Publish to PyPI
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
